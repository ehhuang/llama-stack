name: 'Run and Record Tests'
description: 'Run integration tests and handle recording/artifact upload'

inputs:
  test-types:
    description: 'JSON array of test types to run'
    required: true
  stack-config:
    description: 'Stack configuration to use'
    required: true
  provider:
    description: 'Provider to use for tests'
    required: true
  inference-mode:
    description: 'Inference mode (record or replay)'
    required: true
  run-vision-tests:
    description: 'Whether to run vision tests'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Check Storage and Memory Available Before Tests
      if: ${{ always() }}
      shell: bash
      run: |
        free -h
        df -h

    - name: Set environment variables
      shell: bash
      run: |
        echo "LLAMA_STACK_CLIENT_TIMEOUT=300" >> $GITHUB_ENV
        echo "LLAMA_STACK_TEST_INFERENCE_MODE=${{ inputs.inference-mode }}" >> $GITHUB_ENV

        # Configure provider-specific settings
        if [ "${{ inputs.provider }}" == "ollama" ]; then
          echo "OLLAMA_URL=http://0.0.0.0:11434" >> $GITHUB_ENV
          echo "TEXT_MODEL=ollama/llama3.2:3b-instruct-fp16" >> $GITHUB_ENV
          echo "SAFETY_MODEL=ollama/llama-guard3:1b" >> $GITHUB_ENV
        else
          echo "VLLM_URL=http://localhost:8000/v1" >> $GITHUB_ENV
          echo "TEXT_MODEL=vllm/meta-llama/Llama-3.2-1B-Instruct" >> $GITHUB_ENV
        fi

        if [ "${{ inputs.run-vision-tests }}" == "true" ]; then
          echo "LLAMA_STACK_TEST_RECORDING_DIR=tests/integration/recordings/vision" >> $GITHUB_ENV
        else
          echo "LLAMA_STACK_TEST_RECORDING_DIR=tests/integration/recordings" >> $GITHUB_ENV
        fi

    - name: Run Llama Stack Server
      if: ${{ contains(inputs.stack-config, 'server:') }}
      shell: bash
      run: |
        # Run this so pytest in a loop doesn't start-stop servers in a loop
        echo "Starting Llama Stack Server"
        nohup uv run llama stack run ci-tests --image-type venv > server.log 2>&1 &

        echo "Waiting for Llama Stack Server to start"
        for i in {1..30}; do
          if curl -s http://localhost:8321/v1/health | grep -q "OK"; then
            echo "Llama Stack Server started"
            exit 0
          fi
          sleep 1
        done

        echo "Llama Stack Server failed to start"
        cat server.log
        exit 1

    - name: Run Integration Tests
      shell: bash
      run: |
        ./.github/actions/run-and-record-tests/run-tests.sh \
          "${{ inputs.stack-config }}" \
          "${{ inputs.inference-mode }}" \
          "${{ inputs.provider }}" \
          "${{ inputs.run-vision-tests }}" \
          '${{ inputs.test-types }}'

    - name: Check Storage and Memory Available After Tests
      if: ${{ always() }}
      shell: bash
      run: |
        free -h
        df -h

    - name: Commit and push recordings
      if: ${{ inputs.inference-mode == 'record' }}
      shell: bash
      run: |
        echo "Checking for recording changes"
        git status --porcelain tests/integration/recordings/

        if [[ -n $(git status --porcelain tests/integration/recordings/) ]]; then
          echo "New recordings detected, committing and pushing"
          git add tests/integration/recordings/

          if [ "${{ inputs.run-vision-tests }}" == "true" ]; then
            git commit -m "Recordings update from CI (vision)"
          else
            git commit -m "Recordings update from CI"
          fi

          git fetch origin ${{ github.event.pull_request.head.ref }}
          git rebase origin/${{ github.event.pull_request.head.ref }}
          echo "Rebased successfully"
          git push origin HEAD:${{ github.event.pull_request.head.ref }}
          echo "Pushed successfully"
        else
          echo "No recording changes"
        fi

    - name: Write inference logs to file
      if: ${{ always() }}
      shell: bash
      run: |
        sudo docker logs ollama > ollama-${{ inputs.inference-mode }}.log || true

    - name: Upload logs
      if: ${{ always() }}
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: logs-${{ github.run_id }}-${{ github.run_attempt || '' }}-${{ strategy.job-index }}
        path: |
          *.log
        retention-days: 1
